/*
 * 
 */

options {
  IGNORE_CASE = false;
}

PARSER_BEGIN(MiniJavaLex)

import java.io.*;

public class MiniJavaLex {

  public static void main(String[] args) throws ParseException {
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    Token temp_token = null;

    SimpleCharStream stream = new SimpleCharStream(reader);
    MiniJavaLexTokenManager TkMgr = new MiniJavaLexTokenManager(stream);

    do {
    temp_token = TkMgr.getNextToken();

    switch(temp_token.kind) {
        case CLASS: System.out.println("CLASS: " + temp_token.image);
            break;
        case PUBLIC: System.out.println("PUBLIC: " + temp_token.image);
            break;
        case STATIC: System.out.println("STATIC: " + temp_token.image);
            break;
        case VOID: System.out.println("VOID: " + temp_token.image);
            break;
        case NEW: System.out.println("NEW: " + temp_token.image);
            break;
        case MAIN: System.out.println("MAIN: " + temp_token.image);
            break;
        case STRING: System.out.println("STRING: " + temp_token.image);
            break;
        case EXTENDS: System.out.println("EXTENDS: " + temp_token.image);
            break;
        case RETURN: System.out.println("RETURN: " + temp_token.image);
            break;
        case BOOLEAN: System.out.println("BOOLEAN: " + temp_token.image);
            break;
        case INT: System.out.println("INT: " + temp_token.image);
            break;
        case ID: System.out.println("ID: " + temp_token.image);
            break;
        case IF: System.out.println("IF: " + temp_token.image);
            break;
        case ELSE: System.out.println("ELSE: " + temp_token.image);
            break;
        case WHILE: System.out.println("WHILE: " + temp_token.image);
            break;
        case PRINT: System.out.println("PRINT: " + temp_token.image);
            break;
        case STRING_LITERAL: System.out.println("STRING_LITERAL: " + temp_token.image);
            break;
        case EQUAL: System.out.println("EQUAL: " + temp_token.image);
            break;
        case LPAREN: System.out.println("LPAREN: " + temp_token.image);
            break;
        case RPAREN: System.out.println("RPAREN: " + temp_token.image);
            break;
        case LBRACKET: System.out.println("LBRACKET: " + temp_token.image);
            break;
        case RBRACKET: System.out.println("RBRACKET: " + temp_token.image);
            break;
        case SEMICOLON: System.out.println("SEMICOLON: " + temp_token.image);
            break;
        case ADD_OP: System.out.println("ADD_OP: " + temp_token.image);
            break;
        case MINUS_OP: System.out.println("MINUS_OP: " + temp_token.image);
            break;
        case MULT_OP: System.out.println("MULT_OP: " + temp_token.image);
            break;
        case DIV_OP: System.out.println("DIV_OP: " + temp_token.image);
            break;
        case LENGTH: System.out.println("LENGTH: " + temp_token.image);
            break;
        case DOT: System.out.println("DOT: " + temp_token.image);
            break;
        case NUMBER: System.out.println("NUMBER: " + temp_token.image);
            break;
        case TRUE: System.out.println("TRUE: " + temp_token.image);
            break;
        case FALSE: System.out.println("FALSE: " + temp_token.image);
            break;
        case THIS: System.out.println("THIS: " + temp_token.image);
            break;
        case NOT: System.out.println("NOT: " + temp_token.image);
            break;
        case COMMA: System.out.println("COMMA: " + temp_token.image);
            break;
        case LBRACE: System.out.println("LBRACE: " + temp_token.image);
            break;
        case RBRACE: System.out.println("RBRACE: " + temp_token.image);
            break;
        case LESS_THAN: System.out.println("LESS_THAN: " + temp_token.image);
            break;
        case GREATER_THAN: System.out.println("GREATER_THAN: " + temp_token.image);
            break;
        case EQUALS: System.out.println("EQUALS: " + temp_token.image);
            break;
        case NOT_EQUALS: System.out.println("NOT_EQUALS: " + temp_token.image);
            break;
        case AND: System.out.println("AND: " + temp_token.image);
            break;
        case OR: System.out.println("OR: " + temp_token.image);
            break;
        case LESS_THAN_OR_EQUAL: System.out.println("LESS_THAN_OR_EQUAL: " + temp_token.image);
            break;
        case GREATER_THAN_OR_EQUAL: System.out.println("GREATER_THAN_OR_EQUAL: " + temp_token.image);
            break;
        case INCREMENT: System.out.println("INCREMENT: " + temp_token.image);
            break;
        case DECREMENT: System.out.println("DECREMENT: " + temp_token.image);
            break;
        case PLUS_EQUAL: System.out.println("PLUS_EQUAL: " + temp_token.image);
            break;
        case MINUS_EQUAL: System.out.println("MINUS_EQUAL: " + temp_token.image);
            break;
        case MULT_EQUAL: System.out.println("MULT_EQUAL: " + temp_token.image);
            break;
        case DIV_EQUAL: System.out.println("DIV_EQUAL: " + temp_token.image);
            break;
        default:
            if (temp_token.kind != EOF)
                System.out.println("OTHER: " + temp_token.image);
            break;
        }
    } while (temp_token.kind != EOF);
  }
}

PARSER_END(MiniJavaLex)

SKIP: /* Whitespace */
{
  "\t"
| "\n"
| "\r"
| " "
}

TOKEN:
{
   <CLASS: "class" >
|  <PUBLIC: "public" >
|  <STATIC: "static" >
|  <VOID: "void" >
|  <NEW: "new" >
|  <MAIN: "main" >
|  <STRING: "String" >
|  <EXTENDS: "extends" >
|  <RETURN: "return" >
|  <BOOLEAN: "boolean" >
|  <INT: "int" >
|  <IF: "if" >
|  <ELSE: "else" >
|  <WHILE: "while" >
|  <PRINT: "System.out.print" >
|  <STRING_LITERAL: "\"" (~["\r", "\n", "\""])* "\"" >
|  <EQUAL: "=" >
|  <LPAREN: "(" >
|  <RPAREN: ")" >
|  <LBRACKET: "[">
|  <RBRACKET: "]" >
|  <SEMICOLON: ";" >
|  <ADD_OP: "+" >
|  <MINUS_OP: "-" >
|  <MULT_OP: "*" >
|  <DIV_OP: "/" >
|  <LENGTH: "length" >
|  <DOT: "." >
|  <NUMBER: (["0"-"9"])+ > 
|  <TRUE: "true" >
|  <FALSE: "false" >
|  <THIS: "this" >
|  <NOT: "!" >
|  <COMMA: "," >
|  <LBRACE: "{" >
|  <RBRACE: "}" >
|  <LESS_THAN: "<" >
|  <GREATER_THAN: ">" >
|  <EQUALS: "==" >
|  <NOT_EQUALS: "!=" >
|  <AND: "&&" >
|  <OR: "||" >
|  <LESS_THAN_OR_EQUAL: "<=" >
|  <GREATER_THAN_OR_EQUAL: ">=" >
|  <INCREMENT: "++" >
|  <DECREMENT: "--" >
|  <PLUS_EQUAL: "+=" >
|  <MINUS_EQUAL: "-=" >
|  <MULT_EQUAL: "*=" >
|  <DIV_EQUAL: "/=" >
|  <ID: ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","_","0"-"9"])* >
}