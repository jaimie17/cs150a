/*
 * Group Members: Samiyanur Islam and Jaimie Louie
 * PA2
 * Github Link: https://github.com/jaimie17/cs150a/blob/main/parser/parser.jj
 */

options {
  IGNORE_CASE = false;
}

PARSER_BEGIN(MiniJavaParser)

import java.io.*;

public class MiniJavaParser {

  public static void main(String[] args) throws ParseException, IOException {
    StringBuilder input = new StringBuilder();
    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    
    String line;
    while ((line = reader.readLine()) != null) {
        input.append(line).append('\n');
    }

    SimpleCharStream stream = new SimpleCharStream(reader);
    MiniJavaParserTokenManager TkMgr = new MiniJavaParserTokenManager(stream);
    
    // Tells us whether the program is valid or not
    MiniJavaParser parser = new MiniJavaParser(TkMgr);
    boolean valid = false;
    try {
        parser.Program();
        valid = true;
    } catch (ParseException e) {
        System.out.println("Program is not valid: " + e.getMessage());
    }

    if (valid) {
        System.out.println("Program is valid.");
    } else {
        System.out.println("Program is not valid.");
}
  }
}

PARSER_END(MiniJavaParser)

SKIP: /* Whitespace */
{
  "\t"
| "\n"
| "\r"
| " "
}

TOKEN:
{
   <CLASS: "class" >
|  <PUBLIC: "public" >
|  <STATIC: "static" >
|  <VOID: "void" >
|  <NEW: "new" >
|  <MAIN: "main" >
|  <STRING: "String" >
|  <EXTENDS: "extends" >
|  <RETURN: "return" >
|  <BOOLEAN: "boolean" >
|  <INT: "int" >
|  <IF: "if" >
|  <ELSE: "else" >
|  <WHILE: "while" >
|  <PRINT: "System.out.print" >
|  <STRING_LITERAL: "\"" (~["\r", "\n", "\""])* "\"" >
|  <EQUAL: "=" >
|  <LPAREN: "(" >
|  <RPAREN: ")" >
|  <LBRACKET: "[">
|  <RBRACKET: "]" >
|  <SEMICOLON: ";" >
|  <ADD_OP: "+" >
|  <MINUS_OP: "-" >
|  <MULT_OP: "*" >
|  <DIV_OP: "/" >
|  <LENGTH: "length" >
|  <DOT: "." >
|  <NUMBER: (["0"-"9"])+ > 
|  <TRUE: "true" >
|  <FALSE: "false" >
|  <THIS: "this" >
|  <NOT: "!" >
|  <COMMA: "," >
|  <LBRACE: "{" >
|  <RBRACE: "}" >
|  <LESS_THAN: "<" >
|  <GREATER_THAN: ">" >
|  <EQUALS: "==" >
|  <NOT_EQUALS: "!=" >
|  <AND: "&&" >
|  <OR: "||" >
|  <LESS_THAN_OR_EQUAL: "<=" >
|  <GREATER_THAN_OR_EQUAL: ">=" >
|  <INCREMENT: "++" >
|  <DECREMENT: "--" >
|  <PLUS_EQUAL: "+=" >
|  <MINUS_EQUAL: "-=" >
|  <MULT_EQUAL: "*=" >
|  <DIV_EQUAL: "/=" >
|  <ID: ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","_","0"-"9"])* >
|  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")? >
|  <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/" >
}

/*
 * Parser grammar rules
 */
void Program(): 
{}
{
    ( ClassDeclaration() )*
}

void ClassDeclaration(): 
{}
{
    <CLASS> <ID> ( <EXTENDS> <ID> )? <LBRACE>
        ( VarDeclaration() )*
        ( MethodDeclaration() )*
    <RBRACE>
}

void VarDeclaration(): 
{}
{
    Type() <ID> <SEMICOLON>
}

void MethodDeclaration(): 
{}
{
    <PUBLIC> ( <STATIC> )? Type() <ID> <LPAREN> ( Type() <ID> ( <COMMA> Type() <ID> )* )? <RPAREN> <LBRACE>
        ( VarDeclaration() )*
        ( Statement() )*
        <RETURN> Exp() <SEMICOLON>
    <RBRACE>
}

void Type(): 
{}
{
    <INT>
  | <BOOLEAN>
  | <VOID>
}

void Statement(): 
{}
{
    IfStatement()
  | WhileStatement()
  | PrintStatement()
  | AssignmentStatement()
}

void IfStatement():
{}
{
    <IF> <LPAREN> Exp() <RPAREN> Statement() <ELSE> Statement()
}

void WhileStatement():
{}
{
    <WHILE> <LPAREN> Exp() <RPAREN> Statement()
}

void PrintStatement():
{}
{
    <PRINT> <LPAREN> Exp() <RPAREN> <SEMICOLON>
}

void AssignmentStatement():
{}
{
    <ID> AssignmentStatementA()
}

void AssignmentStatementA():
{}
{
   <LBRACKET> Exp() <RBRACKET> <EQUAL> Exp() <SEMICOLON>
    |
    <EQUAL> Exp() <SEMICOLON>
}

/* Arithmetic Expression Grammar */

void Exp():
{}
{
    Exp9()
}

void Exp9():
{}
{ 
  Exp10() Exp9a()
}

void Exp9a():
{}
{
  <ADD_OP> Exp10()  Exp9a()
  |
  <MINUS_OP> Exp10()  Exp9a()
  |
  {}  
}

void Exp10():
{}
{ 
  Exp11() Exp10a()
}

void Exp10a():
{}
{
  <LESS_THAN> Exp11()  Exp10a()
  |
  {}  
}

void Exp11():
{}
{ 
  Exp12() Exp11a()
}

void Exp11a():
{}
{
  <MULT_OP> Exp12() Exp11a()
  |
  <DIV_OP> Exp12() Exp11a()
  |
  {} 
}

void Exp12():
{}
{ 
  Exp13() ( <AND> Exp13() )?
}

void Exp13():
{}
{
    Exp16() ( <LBRACKET> Exp() <RBRACKET> | <DOT> ( <LENGTH> | LOOKAHEAD(2) <ID> <LPAREN> ExpList() <RPAREN> | <ID> ) | <NEW> ( <INT> <LBRACKET> Exp() <RBRACKET> | <ID> <LPAREN> <RPAREN> ) )?
}

void Exp16():
{ Token t;}
{
  t=<NUMBER> 
  |
  t=<ID> 
  |
  t=<TRUE>
  |
  t=<FALSE>
  |
  <LPAREN> Exp() <RPAREN>
}

void ExpList():
{}
{
    Exp() ( <COMMA> Exp() )*
}