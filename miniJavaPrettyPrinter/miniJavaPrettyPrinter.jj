/*
 * Group Members: Samiyanur Islam and Jaimie Louie
 * PA3
 * Github Link: 
 */

options {
    IGNORE_CASE = false;
  }
  
PARSER_BEGIN(MiniJavaPrettyPrinter)
  
import java.io.*;

public class MiniJavaPrettyPrinter {
    public static void main(String args[]) {
        System.out.println("Reading from standard input...");
        MiniJavaPrettyPrinter parser = new MiniJavaPrettyPrinter(System.in);
        try {
            parser.Start(0);
            System.out.println("Thank you.");
        } catch (ParseException e) {
            System.out.println("Oops.");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}

PARSER_END(MiniJavaPrettyPrinter)

void Start(int indent):
{}
{
    Program(indent)
}
  
  SKIP: /* Whitespace */
  {
    "\t"
  | "\n"
  | "\r"
  | " "
  }
  
  TOKEN:
  {
     <CLASS: "class" >
  |  <PUBLIC: "public" >
  |  <STATIC: "static" >
  |  <VOID: "void" >
  |  <NEW: "new" >
  |  <MAIN: "main" >
  |  <STRING: "String" >
  |  <EXTENDS: "extends" >
  |  <RETURN: "return" >
  |  <BOOLEAN: "boolean" >
  |  <INT: "int" >
  |  <IF: "if" >
  |  <ELSE: "else" >
  |  <WHILE: "while" >
  |  <PRINT: "System.out.println" >
  |  <STRING_LITERAL: "\"" (~["\r", "\n", "\""])* "\"" >
  |  <EQUAL: "=" >
  |  <LPAREN: "(" >
  |  <RPAREN: ")" >
  |  <LBRACKET: "[">
  |  <RBRACKET: "]" >
  |  <SEMICOLON: ";" >
  |  <ADD_OP: "+" >
  |  <MINUS_OP: "-" >
  |  <MULT_OP: "*" >
  |  <DIV_OP: "/" >
  |  <LENGTH: "length" >
  |  <DOT: "." >
  |  <NUMBER: (["0"-"9"])+ > 
  |  <TRUE: "true" >
  |  <FALSE: "false" >
  |  <THIS: "this" >
  |  <NOT: "!" >
  |  <COMMA: "," >
  |  <LBRACE: "{" >
  |  <RBRACE: "}" >
  |  <LESS_THAN: "<" >
  |  <GREATER_THAN: ">" >
  |  <EQUALS: "==" >
  |  <NOT_EQUALS: "!=" >
  |  <AND: "&&" >
  |  <OR: "||" >
  |  <LESS_THAN_OR_EQUAL: "<=" >
  |  <GREATER_THAN_OR_EQUAL: ">=" >
  |  <INCREMENT: "++" >
  |  <DECREMENT: "--" >
  |  <PLUS_EQUAL: "+=" >
  |  <MINUS_EQUAL: "-=" >
  |  <MULT_EQUAL: "*=" >
  |  <DIV_EQUAL: "/=" >
  |  <ID: ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","_","0"-"9"])* >
  |  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")? >
  |  <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/" >
  }
  
  /*
   * Grammar rules and pretty printing
   */
  void Program(int indent): 
  {}
  {
      ( ClassDeclaration(indent) )*
  }
  
  void ClassDeclaration(int indent): 
  {}
  {
      <CLASS> <ID> ( <EXTENDS> <ID> )? <LBRACE>
      { 
        for (int i = 0; i < indent; i++) System.out.print("    ");
        System.out.println("class " + token.image + " {"); 
     }
     ( VarDeclaration(indent + 1) )*
     ( MethodDeclaration(indent + 1) )*
     <RBRACE>
    { 
        for (int i = 0; i < indent; i++) System.out.print("    ");
        System.out.println("}"); 
    }
  }
  
  void VarDeclaration(int indent): 
  {}
  {
      ( Type(indent) | <ID> ) ( <LBRACKET> <RBRACKET> )? <ID> ( <EQUAL> Exp(indent) )? <SEMICOLON>
  }
  
  void MethodDeclaration(int indent): 
  {}
  {
      <PUBLIC> ( <STATIC> )? Type(indent) ( <ID> | <MAIN> ) <LPAREN> ( Type(indent) (<LBRACKET> <RBRACKET>)? <ID> ( <COMMA> Type(indent) <ID> )* )? <RPAREN> <LBRACE>
          ( Statement(indent) )*
          ( <RETURN> Exp(indent) <SEMICOLON> )?
      <RBRACE>
  }
  
  void Type(int indent): 
  {}
  {
      <INT>
    | <BOOLEAN>
    | <VOID>
    | <STRING>
  }
  
  void Statement(int indent): 
  {}
  {
    IfStatement(indent)
    | WhileStatement(indent)
    | PrintStatement(indent)
    | LOOKAHEAD(4) VarDeclaration(indent)
    | LOOKAHEAD(4) AssignmentStatement(indent)
    | LOOKAHEAD(4) ClassInstantiation(indent)
    | ArrayDeclaration(indent)
    | MethodCall(indent)
  }
  
  void IfStatement(int indent):
  {}
  {
      <IF> <LPAREN> Exp(indent) <RPAREN> <LBRACE> ( Statement(indent) )* <RBRACE> ( <ELSE> <LBRACE> ( Statement(indent) )* <RBRACE> )?
  }
  
  void WhileStatement(int indent):
  {}
  {
      <WHILE> <LPAREN> Exp(indent) <RPAREN> <LBRACE> ( Statement(indent) )* <RBRACE>
  }
  
  void PrintStatement(int indent):
  {}
  {
      <PRINT> <LPAREN> ( <STRING_LITERAL> | Exp(indent)) <RPAREN> <SEMICOLON>
  }
  
  void AssignmentStatement(int indent):
  {}
  {
      <ID> AssignmentStatementA(indent)
      |
      <THIS> <DOT> <ID> <EQUAL> Exp16(indent) <SEMICOLON>
  }
  
  void AssignmentStatementA(int indent):
  {}
  {
      <LBRACKET> Exp(indent) <RBRACKET> <EQUAL> Exp(indent) <SEMICOLON>
      |
      <EQUAL> Exp(indent) <SEMICOLON>
  }
  
  void ClassInstantiation(int indent):
  {}
  {
      <ID> <ID> <EQUAL> <NEW> <ID> <LPAREN> <RPAREN> <SEMICOLON>
  }
  
  void ArrayDeclaration(int indent):
  {}
  {
      Type(indent) <LBRACKET> <RBRACKET> <ID> <EQUAL> <NEW> Type(indent) <LBRACKET> Exp(indent) <RBRACKET> <SEMICOLON>
  }
  
  void MethodCall(int indent):
  {}
  {
      <ID> <DOT> <ID> <LPAREN> ( ExpList(indent) )? <RPAREN> <SEMICOLON>
  }
  
  void Exp(int indent):
  {}
  {
      Exp9(indent)
  }
  
  void Exp9(int indent):
  {}
  { 
    Exp10(indent) Exp9a(indent)
  }
  
  void Exp9a(int indent):
  {}
  {
    <AND> Exp10(indent) Exp9a(indent)
    |
    {}  
  }
  
  void Exp10(int indent):
  {}
  { 
    Exp11(indent) Exp10a(indent)
  }
  
  void Exp10a(int indent):
  {}
  {
     ( <LESS_THAN> | <GREATER_THAN> ) Exp11(indent) Exp10a(indent)
    |
    {}  
  }
  
  void Exp11(int indent):
  {}
  { 
    Exp12(indent) Exp11a(indent)
  }
  
  void Exp11a(int indent):
  {}
  {
    <ADD_OP> Exp12(indent) Exp11a(indent)
    |
    <MINUS_OP> Exp12(indent) Exp11a(indent)
    |
    {} 
  }
  
  void Exp12(int indent):
  {}
  { 
    Exp13(indent) Exp12a(indent)
  }
  
  void Exp12a(int indent):
  {}
  {
    <MULT_OP> Exp13(indent) Exp12a(indent)
    |
    <DIV_OP> Exp13(indent) Exp12a(indent)
    |
    {} 
  }
  
  void Exp13(int indent):
  {}
  {
      Exp16(indent) ( Exp13a(indent) )?
  }
  
  void Exp13a(int indent):
  {}
  {
      <LBRACKET> Exp(indent) <RBRACKET>
      |
      <DOT> ( <LENGTH> | LOOKAHEAD(2) <ID> <LPAREN> ExpList(indent) <RPAREN> | <ID> )
      |
      <NEW> ( <INT> <LBRACKET> Exp(indent) <RBRACKET> | <ID> <LPAREN> <RPAREN> )
  }
  
  void Exp16(int indent):
  { Token t;}
  {
    <LPAREN> Exp(indent) <RPAREN>
    |
    t=<NUMBER> 
    |
    t=<ID> 
    |
    t=<TRUE>
    |
    t=<FALSE>
    |
    <NOT> Exp16(indent)
    |
    <THIS> <DOT> <ID>
    | LOOKAHEAD(2)
    <NEW> Type(indent) <LBRACKET> Exp(indent) <RBRACKET>
    |
    <NEW> <ID> <LPAREN> ( ExpList(indent) )? <RPAREN>
  }
  
  void ExpList(int indent):
  {}
  {
      Exp(indent) ( <COMMA> Exp(indent) )*
  }