/*
 * Group Members: Samiyanur Islam and Jaimie Louie
 * PA3
 * Github Link: 
 */

options {
  IGNORE_CASE=false;
}

PARSER_BEGIN(MiniJavaPrettyPrinter)

public class MiniJavaPrettyPrinter {

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    MiniJavaPrettyPrinter t = new MiniJavaPrettyPrinter(System.in);
    try {
      t.Start(0);
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(MiniJavaPrettyPrinter)

/* Program Syntax */

void Start(int indent):
{}
{
  MainClass(indent)
  ClassDecls(indent)
  <EOF>

}

  SKIP: /* Whitespace */
  {
    "\t"
  | "\n"
  | "\r"
  | " "
  }
  
  TOKEN:
  {
     <CLASS: "class" >
  |  <PUBLIC: "public" >
  |  <STATIC: "static" >
  |  <VOID: "void" >
  |  <NEW: "new" >
  |  <MAIN: "main" >
  |  <STRING: "String" >
  |  <EXTENDS: "extends" >
  |  <RETURN: "return" >
  |  <BOOLEAN: "boolean" >
  |  <INT: "int" >
  |  <IF: "if" >
  |  <ELSE: "else" >
  |  <WHILE: "while" >
  |  <PRINT: "System.out.println" >
  |  <STRING_LITERAL: "\"" (~["\r", "\n", "\""])* "\"" >
  |  <EQUAL: "=" >
  |  <LPAREN: "(" >
  |  <RPAREN: ")" >
  |  <LBRACKET: "[">
  |  <RBRACKET: "]" >
  |  <SEMICOLON: ";" >
  |  <ADD_OP: "+" >
  |  <MINUS_OP: "-" >
  |  <MULT_OP: "*" >
  |  <DIV_OP: "/" >
  |  <LENGTH: "length" >
  |  <DOT: "." >
  |  <NUMBER: (["0"-"9"])+ > 
  |  <TRUE: "true" >
  |  <FALSE: "false" >
  |  <THIS: "this" >
  |  <NOT: "!" >
  |  <COMMA: "," >
  |  <LBRACE: "{" >
  |  <RBRACE: "}" >
  |  <LESS_THAN: "<" >
  |  <GREATER_THAN: ">" >
  |  <EQUALS: "==" >
  |  <NOT_EQUALS: "!=" >
  |  <AND: "&&" >
  |  <OR: "||" >
  |  <LESS_THAN_OR_EQUAL: "<=" >
  |  <GREATER_THAN_OR_EQUAL: ">=" >
  |  <INCREMENT: "++" >
  |  <DECREMENT: "--" >
  |  <PLUS_EQUAL: "+=" >
  |  <MINUS_EQUAL: "-=" >
  |  <MULT_EQUAL: "*=" >
  |  <DIV_EQUAL: "/=" >
  |  <ID: ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","_","0"-"9"])* >
  |  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")? >
  |  <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/" >
  }
  
void MainClass(int indent):
{Token s,t;}
{
  <CLASS>
  t = <ID> 
  <LCURLY>  
      {System.out.println("class "+t.image+"{");}
  <PUBLIC> <STATIC> <VOID> <MAIN> 
      {System.out.print("    public static void main"); }
  <LPAREN> "String" <LBRACKET> <RBRACKET> 
  s = <ID> 
  <RPAREN>
      {System.out.println("(String[] " +s.image + "){");  }
  <LCURLY> 
  Statement(indent + 1) 
  <RCURLY>
  <RCURLY>
      {System.out.println("\n  }\n}\n"); }
}
  
void Statement(int indent):
{Token t;}
{ 
  <LCURLY> 
      {System.out.format("%1$" + 4*indent + "s", "");}
      {System.out.println("{");}
  Statements(indent + 1) 
      {System.out.format("%1$"+ 4*indent + "s", "");}
      {System.out.println("}");}
  <RCURLY> 

  |
      {System.out.format("%1$" + 4*indent + "s", "");}
  <IF> 
  <LPAREN> 
      {System.out.print("if (");}
  Exp()
  <RPAREN> 
      {System.out.println(")");}
  Statement(indent + 1) 
  <ELSE> 
      {System.out.format("%1$" + 4*indent + "s", "");}
      {System.out.println("else ");}
  Statement(indent + 1)
      {System.out.println();}

|
  LOOKAHEAD(2) 
  t=<ID> <EQUALS> 
      {System.out.format("%1$" + 4*indent + "s", "");}
      {System.out.print(t.image+" = ");}
  Exp() 
  <SEMICOLON> 
      {System.out.println(";");}
  |
// et cetera
}